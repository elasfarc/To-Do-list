(()=>{"use strict";var n={426:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(15),o=e.n(r),a=e(645),i=e.n(a)()(o());i.push([n.id,'* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nhtml {\n  font-size: 0.625rem;\n}\n\nbody {\n  display: flex;\n  justify-content: center;\n  background-color: rgb(246, 246, 246);\n  font-family: "Open Sans", sans-serif;\n  font-weight: 100;\n}\n\nli {\n  list-style-type: none;\n}\n\n.container {\n  max-width: 1200px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n}\n\n.header {\n  margin-bottom: 50px;\n  font-size: 4rem;\n  font-style: oblique;\n}\n\n.list-container {\n  background-color: white;\n  width: 70%;\n  box-shadow: 1px 1px 10px rgba(0, 0, 0, 0.603);\n  font-size: 2rem;\n}\n\n.list-wrapper {\n  max-height: 60vh;\n  overflow-y: scroll;\n}\n\n.task,\n.rmv-completed,\n.form {\n  padding: 1em;\n  border-bottom: 2px solid rgb(235, 235, 235);\n}\n\n.list-title {\n  display: block;\n  position: relative;\n}\n\n.list-title .icon-sync {\n  position: absolute;\n  top: 50%;\n  right: 4%;\n  transform: translateY(-50%);\n}\n\n.form {\n  width: 100%;\n  border: none;\n  font-style: italic;\n  font-size: inherit;\n  letter-spacing: 1.5px;\n}\n\n.list-name {\n  border-bottom: 2px solid rgb(235, 235, 235);\n}\n\n.add-task-input {\n  font-style: italic;\n}\n\n.add-task-input::placeholder {\n  opacity: 0.6;\n  word-spacing: 1px;\n  letter-spacing: 0;\n}\n\n.text-input {\n  width: 90%;\n  border: none;\n  font-size: inherit;\n  letter-spacing: 1.5px;\n}\n\n.text-input:focus {\n  outline: none;\n}\n\n.task {\n  display: flex;\n  justify-content: space-between;\n  align-items: baseline;\n}\n\n.task-status:checked {\n  opacity: 0;\n}\n\n.task .text-input {\n  margin-right: auto;\n  margin-left: 2rem;\n}\n\n.current-drag > .form .text-input {\n  background-color: rgba(31, 216, 21, 0.019);\n}\n\n.task-status:checked ~ .form .text-input {\n  color: rgb(166, 166, 166);\n  text-decoration: line-through;\n}\n\n.onFocus {\n  background-color: rgba(245, 228, 71, 0.389);\n}\n\n.onFocus-input {\n  background-color: rgba(245, 228, 71, 0.0119);\n}\n\n.task .icon-move {\n  padding: 0 0.5em;\n  cursor: move;\n}\n\n.icon {\n  opacity: 0.5;\n  font-weight: 400;\n}\n\n.rmv-completed {\n  background-color: rgb(246, 246, 246);\n  text-align: center;\n}\n\n.rmv-completed-action:link,\n.rmv-completed-action:visited {\n  text-decoration: none;\n  color: rgb(166, 166, 166);\n}\n\n.rmv-completed-action:hover {\n  text-decoration: underline;\n  color: #000;\n}\n\n.current-drag {\n  background-color: rgba(30, 216, 21, 0.373);\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,sBAAsB;EACtB,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,oCAAoC;EACpC,oCAAoC;EACpC,gBAAgB;AAClB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,iBAAiB;EACjB,WAAW;EACX,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;EACvB,kBAAkB;AACpB;;AAEA;EACE,mBAAmB;EACnB,eAAe;EACf,mBAAmB;AACrB;;AAEA;EACE,uBAAuB;EACvB,UAAU;EACV,6CAA6C;EAC7C,eAAe;AACjB;;AAEA;EACE,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;;;EAGE,YAAY;EACZ,2CAA2C;AAC7C;;AAEA;EACE,cAAc;EACd,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,2BAA2B;AAC7B;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,kBAAkB;EAClB,qBAAqB;AACvB;;AAEA;EACE,2CAA2C;AAC7C;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,iBAAiB;EACjB,iBAAiB;AACnB;;AAEA;EACE,UAAU;EACV,YAAY;EACZ,kBAAkB;EAClB,qBAAqB;AACvB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,qBAAqB;AACvB;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA;EACE,0CAA0C;AAC5C;;AAEA;EACE,yBAAyB;EACzB,6BAA6B;AAC/B;;AAEA;EACE,2CAA2C;AAC7C;;AAEA;EACE,4CAA4C;AAC9C;;AAEA;EACE,gBAAgB;EAChB,YAAY;AACd;;AAEA;EACE,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,oCAAoC;EACpC,kBAAkB;AACpB;;AAEA;;EAEE,qBAAqB;EACrB,yBAAyB;AAC3B;;AAEA;EACE,0BAA0B;EAC1B,WAAW;AACb;;AAEA;EACE,0CAA0C;AAC5C",sourcesContent:['* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nhtml {\n  font-size: 0.625rem;\n}\n\nbody {\n  display: flex;\n  justify-content: center;\n  background-color: rgb(246, 246, 246);\n  font-family: "Open Sans", sans-serif;\n  font-weight: 100;\n}\n\nli {\n  list-style-type: none;\n}\n\n.container {\n  max-width: 1200px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n}\n\n.header {\n  margin-bottom: 50px;\n  font-size: 4rem;\n  font-style: oblique;\n}\n\n.list-container {\n  background-color: white;\n  width: 70%;\n  box-shadow: 1px 1px 10px rgba(0, 0, 0, 0.603);\n  font-size: 2rem;\n}\n\n.list-wrapper {\n  max-height: 60vh;\n  overflow-y: scroll;\n}\n\n.task,\n.rmv-completed,\n.form {\n  padding: 1em;\n  border-bottom: 2px solid rgb(235, 235, 235);\n}\n\n.list-title {\n  display: block;\n  position: relative;\n}\n\n.list-title .icon-sync {\n  position: absolute;\n  top: 50%;\n  right: 4%;\n  transform: translateY(-50%);\n}\n\n.form {\n  width: 100%;\n  border: none;\n  font-style: italic;\n  font-size: inherit;\n  letter-spacing: 1.5px;\n}\n\n.list-name {\n  border-bottom: 2px solid rgb(235, 235, 235);\n}\n\n.add-task-input {\n  font-style: italic;\n}\n\n.add-task-input::placeholder {\n  opacity: 0.6;\n  word-spacing: 1px;\n  letter-spacing: 0;\n}\n\n.text-input {\n  width: 90%;\n  border: none;\n  font-size: inherit;\n  letter-spacing: 1.5px;\n}\n\n.text-input:focus {\n  outline: none;\n}\n\n.task {\n  display: flex;\n  justify-content: space-between;\n  align-items: baseline;\n}\n\n.task-status:checked {\n  opacity: 0;\n}\n\n.task .text-input {\n  margin-right: auto;\n  margin-left: 2rem;\n}\n\n.current-drag > .form .text-input {\n  background-color: rgba(31, 216, 21, 0.019);\n}\n\n.task-status:checked ~ .form .text-input {\n  color: rgb(166, 166, 166);\n  text-decoration: line-through;\n}\n\n.onFocus {\n  background-color: rgba(245, 228, 71, 0.389);\n}\n\n.onFocus-input {\n  background-color: rgba(245, 228, 71, 0.0119);\n}\n\n.task .icon-move {\n  padding: 0 0.5em;\n  cursor: move;\n}\n\n.icon {\n  opacity: 0.5;\n  font-weight: 400;\n}\n\n.rmv-completed {\n  background-color: rgb(246, 246, 246);\n  text-align: center;\n}\n\n.rmv-completed-action:link,\n.rmv-completed-action:visited {\n  text-decoration: none;\n  color: rgb(166, 166, 166);\n}\n\n.rmv-completed-action:hover {\n  text-decoration: underline;\n  color: #000;\n}\n\n.current-drag {\n  background-color: rgba(30, 216, 21, 0.373);\n}\n'],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e=n(t);return t[2]?"@media ".concat(t[2]," {").concat(e,"}"):e})).join("")},t.i=function(n,e,r){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var s=0;s<n.length;s++){var c=[].concat(n[s]);r&&o[c[0]]||(e&&(c[2]?c[2]="".concat(e," and ").concat(c[2]):c[2]=e),t.push(c))}},t}},15:n=>{function t(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}n.exports=function(n){var e,r,o=(r=4,function(n){if(Array.isArray(n))return n}(e=n)||function(n,t){var e=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=e){var r,o,a=[],i=!0,s=!1;try{for(e=e.call(n);!(i=(r=e.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(n){s=!0,o=n}finally{try{i||null==e.return||e.return()}finally{if(s)throw o}}return a}}(e,r)||function(n,e){if(n){if("string"==typeof n)return t(n,e);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(n,e):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if(!i)return a;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),A="/*# ".concat(c," */"),l=i.sources.map((function(n){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(n," */")}));return[a].concat(l).concat([A]).join("\n")}return[a].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],A=r.base?c[0]+r.base:c[0],l=a[A]||0,d="".concat(A," ").concat(l);a[A]=l+1;var u=e(d),p={css:c[1],media:c[2],sourceMap:c[3]};-1!==u?(t[u].references++,t[u].updater(p)):t.push({identifier:d,updater:o(p,r),references:1}),i.push(d)}return i}function o(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;e.update(n=t)}else e.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=e(a[i]);t[s].references--}for(var c=r(n,o),A=0;A<a.length;A++){var l=e(a[A]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=c}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r=e.css,o=e.media,a=e.sourceMap;o?n.setAttribute("media",o):n.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,n)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return n[r](a,a.exports,e),a.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t);var r={};(()=>{e.d(r,{y:()=>h});var n=e(379),t=e.n(n),o=e(795),a=e.n(o),i=e(569),s=e.n(i),c=e(565),A=e.n(c),l=e(216),d=e.n(l),u=e(589),p=e.n(u),m=e(426),g={};g.styleTagTransform=p(),g.setAttributes=A(),g.insert=s().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d(),t()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals;class f{constructor({index:n,description:t,completed:e=!1}){this.description=t,this.completed=e,this.index=n}}function E(n){n.preventDefault();const t=n.target.value,e=h.storage.find((t=>t.description===n.target.dataset.currentValue)).index;t.trim()?h.descriptionUpdate(e,t):(n.target.parentElement.parentElement.remove(),h.removeTask(e)),n.target.dataset.currentValue=t}function C(n,t){const e=document.createDocumentFragment(),r=document.createElement("li");r.classList.add("task"),r.setAttribute("draggable","true"),r.id=n.index;const o=document.createElement("input");return o.classList.add("task-status"),o.type="checkbox",n.completed&&o.setAttribute("checked",!0),r.appendChild(o),r.addEventListener("dragstart",(()=>{r.classList.add("current-drag")})),r.addEventListener("dragend",(n=>{r.classList.remove("current-drag"),t.updateIndex(function(n){return[...n.target.parentElement.children].map((n=>({id:n.id,title:n.querySelector(".form .text-input").value})))}(n))})),r.innerHTML+=`\n\n      <div action="" class='form' name='add_task'>\n          <input class='text-input' type="text" name='task_description' value='${n.description}' data-current-value='${n.description}' >\n      </div>\n      <span class="icon-move">\n        <i class="icon fas fa-ellipsis-v"></i>\n      </span>\n  `,e.append(r),r.querySelector(".task-status").addEventListener("change",(()=>{const{index:e}=n;t.statusUpdate(e)})),r.querySelector(".text-input").addEventListener("focus",(n=>{const t=n.target.parentElement.previousElementSibling;n.target.parentElement.parentElement.classList.add("onFocus"),n.target.classList.add("onFocus-input"),t.checked&&(t.checked=!1)})),r.querySelector(".text-input").addEventListener("focusout",(t=>{t.target.parentElement.parentElement.classList.remove("onFocus"),t.target.classList.remove("onFocus-input"),!0===n.completed&&(t.target.parentElement.previousElementSibling.checked=!0)})),r.querySelector(".text-input").addEventListener("change",E),e}const h=new class{#storage;constructor(n="DEMO"){this.listName=n,this.#storage=JSON.parse(localStorage.getItem("tasks"))||[],this.updateLocalStorage()}get storage(){return this.#storage}addTask({description:n,completed:t=!1}){const e=this.nextTaskId(),r=new f({index:e,description:n,completed:t});return this.#storage.push(r),this.updateLocalStorage(),r}nextTaskId(){const n=this.#storage.length-1;return this.#storage.length>0?this.#storage[n].index+1:1}statusUpdate(n){const t=this.#storage.filter((t=>t.index===parseInt(n,10)));t[0].completed=!t[0].completed,this.updateLocalStorage()}descriptionUpdate(n,t){this.#storage.find((t=>t.index===parseInt(n,10))).description=t,this.updateLocalStorage()}removeTask(n){let t=parseInt(n,10)-1;for(this.#storage.splice(t,1);t<this.#storage.length;t+=1)this.#storage[t].index=this.#storage[t].index-1;this.updateLocalStorage()}allCompleted(){return this.#storage.filter((n=>!0===n.completed))}updateIndex(n){n=n.map((n=>n.title));const t=[];n.forEach((n=>{t.push(this.#storage.find((t=>t.description.trim()===n.trim())))}));for(const n in t)t[n].index=parseInt(n,10)+1;this.#storage=t,this.updateLocalStorage()}updateLocalStorage(){localStorage.setItem("tasks",JSON.stringify(this.#storage))}},v=document.querySelector(".list-wrapper");v.append(function(n){const t=document.createDocumentFragment();return n.storage.forEach((e=>{const r=C(e,n);t.append(r)})),t}(h)),v.addEventListener("dragover",(n=>{n.preventDefault();const t=document.querySelector(".current-drag"),{closest:e}=(r=v,o=n.clientY,[...r.querySelectorAll(".task:not(.current-drag)")].reduce(((n,t)=>{const e=t.getBoundingClientRect(),r=o-e.top-e.height/3;return r<0&&r>n.offset?{offset:r,closest:t}:n}),{offset:Number.NEGATIVE_INFINITY}));var r,o;void 0===e?v.appendChild(t):v.insertBefore(t,e)})),function(n,t){const e=document.querySelector(".list-wrapper");n.addEventListener("submit",(n=>{n.preventDefault();const{task_description:r}=n.target.elements,o=r.value;if(r.value="",o.trim()){const n=t.addTask({description:o});e.appendChild(C(n,t))}}))}(document.forms.add_task,h),document.querySelector(".rmv-completed-action p").addEventListener("click",(function(n){n.allCompleted().forEach((t=>{document.querySelector(`[data-current-value= "${t.description}"]`).parentElement.parentElement.remove(),n.removeTask(t.index)}))})),document.querySelector(".list-name").addEventListener("change",(n=>{h.listName=n.target.value}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,